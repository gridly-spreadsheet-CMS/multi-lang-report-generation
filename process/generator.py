class ReportGenerator:
    def __init__(self, report_title, author_name, created_date, visualizer):
        self.report_title = report_title
        self.author_name = author_name
        self.created_date = created_date
        self.visualizer = visualizer

    def generate_footer(self):
        return '''
            <div class="footer">
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; border-top: 1px solid #ccc; font-size: 12px;">
                    <p>Generated by Report Generator</p>
                    <p>&copy; 2024 Gridly. All rights reserved.</p>
                </div>
            </div>
        '''

    def format_text(self, text, format_type='paragraph'):
        if format_type == 'list':
            list_items = text.split('. ')
            list_items = [item if item.endswith('.') else item + '.' for item in list_items if item]
            return f'<ul>{"".join([f'<li>{item}</li>' for item in list_items])}</ul>'

        else:
            return f'<p>{text}</p>'

    def generate_single_chart_html(self, chart_title, chart_description):
        html = ''

        chart_info = self.visualizer.get_chart_by_title(chart_title)
        chart_id = self.visualizer.get_chart_id_by_title(chart_title)

        # Retrieve the description info with a fallback
        description_info = chart_description.get(chart_id, {'text': 'No description provided', 'format': 'paragraph'})
        description_text = description_info['text']
        description_format = description_info['format']
        
        formatted_description = self.format_text(description_text, format_type=description_format)

        html += f'''
            <h3> {chart_info['title']} </h3>
            <div id="{chart_id}"; class="chart-container">
                {chart_info['html']}
            </div>
            {formatted_description}
        '''
        return html

    def generate_dual_chart_html(self, chart_titles, chart_descriptions=None):
        if len(chart_titles) != 2:
            return 'Error: Two chart titles are required for dual chart display.'
        
        chart_info_1 = self.visualizer.get_chart_by_title(chart_titles[0])
        chart_info_2 = self.visualizer.get_chart_by_title(chart_titles[1])

        description_1 = chart_descriptions.get(chart_titles[0], 'This is a sample chart comment') if chart_descriptions else 'No description provided'
        description_2 = chart_descriptions.get(chart_titles[1], 'This is a sample chart comment') if chart_descriptions else 'No description provided'

        dual_chart_html = f'''
            <h3>Sample Side-by-Side Charts</h3>
            <div style="display: flex; justify-content: space-between; overflow: visible;">
                <div class="dual-chart-container" >
                    <h4>{chart_info_1.get("title", "No Title")}</h4>
                    {chart_info_1['html']}
                    <p class="chart-description">{description_1}</p>
                </div>
                <div class="dual-chart-container" >
                    <h4>{chart_info_2.get("title", "No Title")}</h4>
                    {chart_info_2['html']}
                    <p class="chart-description">{description_2}</p>
                </div>
            </div>
        '''

        return dual_chart_html 

    
    def generate_summary_table_html(self, table_title, table_description):
        html = ''

        table_info = self.visualizer.get_summary_table_by_title(table_title)
        table_id = self.visualizer.get_summary_table_id_by_title(table_title)

        # Retrieve the description info with a fallback
        description_info = table_description.get(table_id, {'text': 'No description provided', 'format': 'paragraph'})
        description_text = description_info['text']
        description_format = description_info['format']
        
        formatted_description = self.format_text(description_text, format_type=description_format)        

        html += f'''
            <h3>{table_info.get("title", "No Title")}</h3>
            <div id="{table_id}" class="table-container">
                {table_info['html']}
            </div>
            {formatted_description}
        '''

        return html

    def generate_tabbed_layout(self, tabs):
        tab_headers = '<div class="tab-headers">'
        tab_contents = '<div class="tab-contents">'
        for tab_id, tab_content in tabs.items():
            tab_headers += f'<button onclick="openTab(event, \'{tab_id}\')">{tab_id}</button>'
            tab_contents += f'<div id="{tab_id}" class="tab-content">{tab_content}</div>'
        tab_headers += '</div>'
        tab_contents += '</div>'
        return tab_headers + tab_contents + '''
            <script>
            function openTab(evt, tabName) {
                var i, tabcontent, tablinks;
                tabcontent = document.getElementsByClassName("tab-content");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }
                tablinks = document.getElementsByTagName("button");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }
                document.getElementById(tabName).style.display = "block";
                evt.currentTarget.className += " active";
            }
            </script>
        '''

    def generate_grid_layout(self, contents, columns=2):
        grid_item_width = 100 // columns
        grid_html = '<div class="grid" style="display: flex; flex-wrap: wrap;">'
        for content in contents:
            grid_html += f'''
            <div style="flex: 0 0 {grid_item_width}%; padding: 10px;">
                {content}
            </div>
            '''
        grid_html += '</div>'
        return grid_html
    

    def generate_html_report(self, single_chart_titles=None, dual_charts_titles=None, chart_descriptions=None, table_titles=None, table_descriptions=None):
        footer_html = self.generate_footer()

        # Generate HTML for single charts
        single_charts_html = ''
        for title in single_chart_titles:
            single_charts_html += self.generate_single_chart_html(title, chart_descriptions)

        # Generate HTML for dual charts
        dual_charts_html = ''
        for chart_pair in dual_charts_titles:
            dual_charts_html += self.generate_dual_chart_html(list(chart_pair), chart_descriptions)

        tables_html = ''
        for title in table_titles:
            tables_html += self.generate_summary_table_html(title, table_descriptions)

        # Basic template, it could be improved
        html_string = f'''
        <html>
            <head>
                <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
                <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
                <style>
                    body, html {{ 
                        height: 100%; 
                        margin: 10; 
                        padding: 10; 
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    }}               
                    .chart-container {{ width: 80%; height: auto; margin: 20px auto; padding: 20px;}}
                    .table-container {{ width: 80%; height: auto; margin: 20px; }}
                    
                    h1, h3, p {{ 
                        margin: 20px; 
                        text-align: justify;
                    }}
                    
                    p, li {{ 
                        font-size: 16px; 
                        line-height: 1.6;
                    }}

                    .chart-description {{
                        font-size: 12px;
                        font-style: italic;
                        color: #6c757d;
                        text-align: center;
                    }}

                    .dual-chart-container {{
                        width: 48%;
                        height: 40%;
                        margin: 20px;
                        padding: 20px;
    
                    }}
                
                    .metadata {{
                        font-size: 14px;
                        font-style: italic;
                        color: #555;
                        padding: auto;
                        margin: auto;
                    }}

                    .metadata p {{
                        color: #6c757d;
                        text-align: right !important;
                    }}
                </style>
            </head>
            <body>
                <h1><b> {self.report_title} </b></h1>
                <div class="metadata">
                    <p>Created on: {self.created_date} | Author: {self.author_name}</p>
                </div>      
                    {single_charts_html}

                    {dual_charts_html}

                    {tables_html}
            </body>
            {footer_html}
        </html>
        '''
        return html_string
